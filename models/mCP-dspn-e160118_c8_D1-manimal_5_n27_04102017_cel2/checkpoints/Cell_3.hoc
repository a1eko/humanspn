/*
Created by BluePyOpt(1.14.12) at 2024-09-11 18:30:13.703913
*/
{load_file("stdrun.hoc")}
{load_file("import3d.hoc")}
/*
 * Check that global parameters are the same as with the optimization
 */
proc check_parameter(/* name, expected_value, value */){
  strdef error
  if($2 != $3){
    sprint(error, "Parameter %s has different value %f != %f", $s1, $2, $3)
    execerror(error)
  }
}
proc check_simulator() {
  check_parameter("celsius", 35, celsius)
  check_parameter("v_init", -91.0, v_init)
}

begintemplate Cell_3
  public init, morphology, geom_nseg_fixed, geom_nsec, gid
  public channel_seed, channel_seed_set
  public soma, dend, apic, axon, myelin
  create soma[1], dend[1], apic[1], axon[1], myelin[1]

  objref this, CellRef, segCounts

  public all, somatic, apical, axonal, basal, myelinated, APC
  objref all, somatic, apical, axonal, basal, myelinated, APC

obfunc getCell(){
        return this
}

proc init(/* args: morphology_dir, morphology_name */) {
  all = new SectionList()
  apical = new SectionList()
  axonal = new SectionList()
  basal = new SectionList()
  somatic = new SectionList()
  myelinated = new SectionList()

  //gid in this case is only used for rng seeding
  gid = 0

  //For compatibility with BBP CCells
  CellRef = this

  forall delete_section()

  if(numarg() >= 2) {
    load_morphology($s1, $s2)
  } else {
    load_morphology($s1, "animal_5_n27_04102017_cel2.swc")
  }

  geom_nseg()
    replace_axon()
  insertChannel()
  biophys()

  // Initialize channel_seed_set to avoid accidents
  channel_seed_set = 0
  // Initialize random number generators
  re_init_rng()
}

proc load_morphology(/* morphology_dir, morphology_name */) {localobj morph, import, sf, extension
  strdef morph_path
  sprint(morph_path, "%s/%s", $s1, $s2)

  sf = new StringFunctions()
  extension = new String()

  sscanf(morph_path, "%s", extension.s)
  sf.right(extension.s, sf.len(extension.s)-4)

  if( strcmp(extension.s, ".asc") == 0 ) {
    morph = new Import3d_Neurolucida3()
  } else if( strcmp(extension.s, ".swc" ) == 0) {
    morph = new Import3d_SWC_read()
  } else {
    printf("Unsupported file format: Morphology file has to end with .asc or .swc" )
    quit()
  }

  morph.quiet = 1
  morph.input(morph_path)

  import = new Import3d_GUI(morph, 0)
  import.instantiate(this)
}

/*
 * Assignment of mechanism values based on distance from the soma
 * Matches the BluePyOpt method
 */
proc distribute_distance(){local x localobj sl
  strdef stmp, distfunc, mech

  sl = $o1
  mech = $s2
  distfunc = $s3
  this.soma[0] distance(0, 0.5)
  sprint(distfunc, "%%s %s(%%f) = %s", mech, distfunc)
  forsec sl for(x, 0) {
    // use distance(x) twice for the step distribution case, e.g. for calcium hotspot
    sprint(stmp, distfunc, secname(), x, distance(x), distance(x))
    execute(stmp)
  }
}

proc geom_nseg() {
  this.geom_nsec() //To count all sections
  //TODO: geom_nseg_fixed depends on segCounts which is calculated by
  //  geom_nsec.  Can this be collapsed?
  this.geom_nseg_fixed(40)
  this.geom_nsec() //To count all sections
}

proc insertChannel() {
  forsec this.all {
    insert pas
  }
  forsec this.apical {
  }
  forsec this.axonal {
    insert naf
    insert kas
    insert Im
  }
  forsec this.basal {
    insert naf
    insert kaf
    insert kas
    insert kdr
    insert kir
    insert cal12
    insert cal13
    insert car
    insert cat32
    insert cat33
    insert cadyn
    insert caldyn
    insert sk
    insert bk
  }
  forsec this.somatic {
    insert naf
    insert kaf
    insert kas
    insert kdr
    insert kir
    insert cal12
    insert cal13
    insert can
    insert car
    insert cadyn
    insert caldyn
    insert sk
    insert bk
    insert Im
  }
  forsec this.myelinated {
  }
}

proc biophys() {
  
  forsec CellRef.all {
    e_pas = -89.984870366846764
    Ra = 150
    ena = 53.340000000000003
    ek = -105.90000000000001
  }
  
  forsec CellRef.apical {
  }
  
  forsec CellRef.axonal {
    g_pas = 0.10625740107431038
    cm = 1
    gbar_naf = 17.758600415962359
    gbar_kas = 0.93880853996691072
    gbar_Im = 0.39981058552566107
  }
  
  forsec CellRef.basal {
    q_kaf = 1
    gbar_kdr = 0.00024383972369578912
    gbar_kir = 0.0007314648756158804
    shift_kir = -20
    q_kir = 1
    pbar_cal12 = 1.0000000000000001e-05
    pbar_cal13 = 9.9999999999999995e-07
    pbar_car = 0.0001
    taur_cadyn = 43
    gbar_bk = 7.9378015306831843e-07
    q_bk = 1
    gbar_sk = 2.5091794290686624e-09
    q_sk = 1
  }
  
  forsec CellRef.somatic {
    g_pas = 0.00062209208678658267
    cm = 1
    gbar_naf = 11.626298130360041
    gbar_kaf = 0.53516981315697343
    q_kaf = 1
    gbar_kas = 0.0035795999553564846
    gbar_kdr = 0.0036759408420354773
    gbar_kir = 0.00043490039283579574
    shift_kir = -20
    q_kir = 1
    pbar_cal12 = 1.0000000000000001e-05
    pbar_cal13 = 9.9999999999999995e-07
    pbar_can = 3.0000000000000001e-05
    pbar_car = 0.0001
    taur_cadyn = 14
    gbar_bk = 0.0003537026392766936
    q_bk = 1
    gbar_sk = 0.00011184653465319899
    q_sk = 1
    gbar_Im = 0.00067626282225896519
  }
  
  forsec CellRef.myelinated {
  }
  
  distribute_distance(CellRef.basal, "g_pas", "((1.0) + (1.0)/(1 + exp(((37.08)-%.17g)/(4.21))))*1.9220170535346169e-05")
  distribute_distance(CellRef.basal, "cm", "((1.0) + (1.0)/(1 + exp(((37.08)-%.17g)/(4.21))))*1")
  distribute_distance(CellRef.basal, "gbar_naf", "((0.1) + (0.9)/(1 + exp((%.17g-(40))/(10))))*0.060599374862158058")
  distribute_distance(CellRef.basal, "gbar_kaf", "((1.0) + (0.5)/(1 + exp((%.17g-(120))/(-30))))*0.010031097040711685")
  distribute_distance(CellRef.basal, "gbar_kas", "((1.0) + (9.0)*exp((%.17g-(0.0))/(-5.0)))*0.000315639194190524")
  distribute_distance(CellRef.basal, "pbar_cat32", "((0.0) + (1.0)/(1 + exp((%.17g-(120))/(-30))))*2.0000000000000001e-09")
  distribute_distance(CellRef.basal, "pbar_cat33", "((0.0) + (1.0)/(1 + exp((%.17g-(120))/(-30))))*2.0000000000000001e-09")
}

func sec_count(/* SectionList */) { local nSec
  nSec = 0
  forsec $o1 {
      nSec += 1
  }
  return nSec
}

/*
 * Iterate over the section and compute how many segments should be allocate to
 * each.
 */
proc geom_nseg_fixed(/* chunkSize */) { local secIndex, chunkSize
  chunkSize = $1
  soma area(.5) // make sure diam reflects 3d points
  secIndex = 0
  forsec all {
    nseg = 1 + 2*int(L/chunkSize)
    segCounts.x[secIndex] = nseg
    secIndex += 1
  }
}

/*
 * Count up the number of sections
 */
proc geom_nsec() { local nSec
  nSecAll = sec_count(all)
  nSecSoma = sec_count(somatic)
  nSecApical = sec_count(apical)
  nSecBasal = sec_count(basal)
  nSecMyelinated = sec_count(myelinated)
  nSecAxonalOrig = nSecAxonal = sec_count(axonal)

  segCounts = new Vector()
  segCounts.resize(nSecAll)
  nSec = 0
  forsec all {
    segCounts.x[nSec] = nseg
    nSec += 1
  }
}

/*
 * Replace the axon built from the original morphology file with a stub axon
 */
    
proc replace_axon(){ local nSec, D1, D2
  // preserve the number of original axonal sections
  nSec = sec_count(axonal)

  // Try to grab info from original axon
  if(nSec == 0) { //No axon section present
    D1 = D2 = 1
  } else if(nSec == 1) {
    axon[0] D1 = D2 = diam
  } else {
    axon[0] D1 = D2 = diam
    soma distance() //to calculate distance from soma
    forsec axonal{
      //if section is longer than 60um then store diam and exit from loop
      if(distance(0.5) > 60){
        D2 = diam
        break
      }
    }
  }

  // get rid of the old axon
  forsec axonal{
    delete_section()
  }

  create axon[2]

  axon[0] {
    L = 30
    diam = D1
    nseg = 1 + 2*int(L/40)
    all.append()
    axonal.append()
  }
  axon[1] {
    L = 30
    diam = D2
    nseg = 1 + 2*int(L/40)
    all.append()
    axonal.append()
  }
  nSecAxonal = 2
  soma[0] connect axon[0](0), 1
  axon[0] connect axon[1](0), 1
}
        



func hash_str() {localobj sf strdef right
  sf = new StringFunctions()

  right = $s1

  n_of_c = sf.len(right)

  hash = 0
  char_int = 0
  for i = 0, n_of_c - 1 {
     sscanf(right, "%c", & char_int)
     hash = (hash * 31 + char_int) % (2 ^ 31 - 1)
     sf.right(right, 1)
  }

  return hash
}

proc re_init_rng() {localobj sf
    strdef full_str, name

    sf = new StringFunctions()

    if(numarg() == 1) {
        // We received a third seed
        channel_seed = $1
        channel_seed_set = 1
    } else {
        channel_seed_set = 0
    }


}


endtemplate Cell_3